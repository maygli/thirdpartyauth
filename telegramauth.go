package auththirdparty

import (
	"net/http"
	"strconv"

	"github.com/wesleym/telegramwidget"
)

const (
	// Service name (telegram)
	TELEGRAM_SERVICE_NAME   = "telegram"
	TELEGRAM_USER_KEY       = "id"
	TELEGRAM_FIRST_NAME_KEY = "first_name"
	TELEGRAM_LAST_NAME_KEY  = "last_name"
	TELEGRAM_AVATAR_KEY     = "photo_url"
	TELEGRAM_HASH_KEY       = "hash"
)

// User structure returned by Telegram
type TelegramUser struct {
	// User id
	UserId string `json:"user_id"`
	// First name
	FirstName string `json:"first_name"`
	// Last name
	LastName string `json:"last_name"`
	// Avatar URL
	Avatar string `json:"avatar"`
}

// Telegram authorization service configuration
type TelegramAuthConfigure struct {
	// Telegram bot id (must specified)
	BotId string `json:"bot_id" env:"${SERVER_NAME}_AUTH_TELEGRAM_BOT_ID"`
	// Telegram bot secret (must specified)
	BotSecret string `json:"bot_secret" env:"${SERVER_NAME}_AUTH_TELEGRAM_BOT_SECRET"`
	// Service address. Should be the same as registered in Telegram
	ServerAddress string `json:"server_address" env:"${SERVER_NAME}_SERVER_ADDRESS"`
	// Login endpoint. Can be empty. In this case '/auth/telegram/login' will be used
	LoginEndPoint string `json:"telegram_login_endpoint" env:"${SERVER_NAME}_TELEGRAM_LOGIN_ENDPOINT" default:"/auth/telegram/login"`
	// Callback endpoint. Can be empty. In this case '/auth/telegram/callback' will be used
	CallbackEndPoint string `json:"telegram_callback_endpoint" env:"${SERVER_NAME}_TELEGRAM_CALLBACK_ENDPOINT" default:"/telegram/google/callback"`
	// Login page URL. It is suppose this page contains widget generated by Telegram
	LoginPageUrl string `json:"telegram_login_page_url" env:"${SERVER_NAME}_TELEGRAM_LOGIN_PAGE_URL" default:"/auth_pages/telegram-login.html"`
}

// Telegram authorization service structure
type TelegramAuthService struct {
	AuthThirdPartyBase
	BotId        string
	BotSecret    string
	LoginPageUrl string
}

// Create Telegram authorization structure.
// Parameters:
//   - config Telegram authorization service config
//   - processor complete processor
//
// Returns:
//
//	pointer to Telegram authorization service structure
func NewTelegramAuthService(config TelegramAuthConfigure, processor CompleteAuthProcessor) *TelegramAuthService {
	service := TelegramAuthService{
		AuthThirdPartyBase: AuthThirdPartyBase{
			LoginEndPoint:    config.LoginEndPoint,
			CallbackEndPoint: config.CallbackEndPoint,
			AuthProcessor:    processor,
		},
		BotId:        config.BotId,
		BotSecret:    config.BotSecret,
		LoginPageUrl: config.LoginPageUrl,
	}
	return &service
}

// Return service name ('telegram').
//
// Returns:
//
//	service name
func (service TelegramAuthService) GetServiceName() string {
	return TELEGRAM_SERVICE_NAME
}

// Login endpoint.
//
// Parameters:
//   - w response writter
//   - r http request
func (service TelegramAuthService) telegramAuthLoginHandle(w http.ResponseWriter, r *http.Request) {
	http.Redirect(w, r, service.LoginPageUrl, http.StatusSeeOther)
}

// Convert data received from Telegram to AuthThirdPartyUser.
//
// Parameters:
//   - user data received from Telegram
//
// Returns:
//
//	AuthThirdPartyUser
func telegramToAuthUser(user telegramwidget.User) AuthThirdPartyUser {
	resUser := AuthThirdPartyUser{
		FirstName: user.FirstName,
		LastName:  user.LastName,
		Avatar:    user.PhotoURL.Host,
		UserId:    strconv.FormatInt(user.ID, 10),
		Service:   TELEGRAM_SERVICE_NAME,
	}
	return resUser
}

// Telegram authorization service callback handle.
//
// Parameters:
//   - w response writter
//   - r http request
func (service TelegramAuthService) telegramAuthCallbackHandle(w http.ResponseWriter, r *http.Request) {
	user, err := telegramwidget.ConvertAndVerifyForm(r.URL.Query(), service.BotSecret)
	if err != nil {
		service.ProcessError(err, w, r)
		return
	}
	telegramUser := telegramToAuthUser(user)
	err = service.ProcessSuccess(telegramUser, w, r)
	if err != nil {
	}
}

// Registered Telegram authorization service endpoints.
//
// Parameters:
//   - mux server mux
func (service TelegramAuthService) RegisterHandlers(mux *http.ServeMux) {
	mux.HandleFunc("GET "+service.GetLoginEndpoint(service.GetServiceName()), service.telegramAuthLoginHandle)
	mux.HandleFunc("GET "+service.GetCallbackEndpoint(service.GetCallbackEndpoint(service.GetServiceName())), service.telegramAuthCallbackHandle)
}
